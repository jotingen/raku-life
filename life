#!/usr/bin/env perl6

use NCurses;

subset NeighborInt of UInt where 0 <= * <= 8;

class Cell {
  has Bool $.isAlive = False;
  has NeighborInt $.neighbors is rw = 0;
  
  method birth() {
    $!isAlive = True;
  }

  method kill() {
    $!isAlive = False;
  }

  method Str() {
    return $!isAlive ?? '0' !! ' ';
  }
};

class Board {
  has UInt $.width = qx[tput cols].UInt + 1;
  has UInt $.height = qx[tput lines].UInt + 1 - 1; #Compensate for prompt
  has @.cell = [ Cell.new() xx $!width+1 ] xx $!height+1;
    
  method birth(UInt $height where 0 < $height < $!height, UInt $width where 0 < $width < $!width) {
    if !@!cell[$height][$width].isAlive {
      @!cell[$height][$width].birth;
      for $height-1, $height, $height+1  -> $k {
        for $width-1, $width, $width+1  -> $l {
          if !($height == $k && $width == $l) {
            @!cell[$k][$l].neighbors = @!cell[$k][$l].neighbors + 1;
          }
        }
      }
    }
  }

  method kill(UInt $height where 0 < $height < $!height, UInt $width where 0 < $width < $!width) {
    if @!cell[$height][$width].isAlive {
      @!cell[$height][$width].kill;
      for $height-1, $height, $height+1  -> $k {
        for $width-1, $width, $width+1  -> $l {
          if !($height == $k && $width == $l) {
            @!cell[$k][$l].neighbors = @!cell[$k][$l].neighbors - 1;
          }
        }
      }
    }
  }

  method evolve() {
    my $bnew = Board.new();
    for 0 ^..^ $!height -> $i {
      for 0 ^..^ $!width -> $j {
        #Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
        #Any live cell with two or three live neighbours lives on to the next generation.
        #Any live cell with more than three live neighbours dies, as if by overpopulation.
        #Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
        if (@!cell[$i][$j].isAlive && 2 <= @!cell[$i][$j].neighbors <= 3) ||
           (!@!cell[$i][$j].isAlive && @!cell[$i][$j].neighbors == 3) {
            $bnew.birth($i,$j);
        }
      }
    }
    @!cell = $bnew.cell;
  }
  
  method print() {
    my $s = "\n";
    for 0 ^..^ $!height -> $i {
      for 0 ^..^ $!width -> $j {
        $s ~= @!cell[$i][$j];
      }
      $s ~= "\n";
    }
    print $s;
  }
};

initscr();
curs_set(0);

my $b = Board.new();

#Initialize the board randomly
#$b.birth((0 ^..^ $b.height).pick.UInt,(0 ^..^ $b.width).pick.UInt) for 0 .. $b.height * $b.width * .3;
#Copy of web demo
#$b.birth(15,16);
#$b.birth(16,17);
#$b.birth(17,15);
#$b.birth(17,16);
#$b.birth(17,17);
#R-Pentomino
$b.birth(15,16);
$b.birth(15,17);
$b.birth(16,15);
$b.birth(16,16);
$b.birth(17,16);

#Play the game
for 1 .. Inf -> $gen {
  my $start = now;

  clear();

  for 0 ^..^ $b.height -> $i {
    for 0 ^..^ $b.width -> $j {
      mvaddstr($i,$j-1,$b.cell[$i][$j].Str);
    }
  }

  $b.evolve;
  $b.birth((0 ^..^ $b.height).pick.UInt,(0 ^..^ $b.width).pick.UInt) if $gen%%10;

  my $end = now;

  mvaddstr(0,0,sprintf("%4d : %8.6fs", $gen, $end - $start));

  nc_refresh();
  sleep(.5 - now - $start);
}
endwin();
